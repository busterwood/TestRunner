<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="testIcons16.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="testIcons16.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAADA
        BwAAAk1TRnQBSQFMAgEBAwEAATgBAAE4AQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEYBgABDCQAAcgB1wHSIQACPQHbAj0B2wI9AdYVAAI9AdsCPQHbAj0B228AA/8BXwHT
        Aa4BMwHMAZkBtgHbAdAbAAI+AdwCPgHcAj4B3AI+AdwCPgHXDwACPgHcAj4B3AI+AdwCPgHcAj4B3AMA
        A/0B+wH8AfshAAL5Afo8AAP9AUsB0QGkATMBzAGZATMBzAGZATMBzAGZAeUB7gHrFQACQAHaAkAB3gJA
        Ad4CQAHeAkAB3gJAAd4CPwHZCQACQAHeAkAB3gJAAd4CQAHeAkAB3gJAAd4DAAGrAdgBywE/AeEByQHx
        AvIbAAGOAZEB3QE+AUIB5AP8NgAD+wE+Ac8BoQEzAcwBmQEzAcwBmQEzAcwBmQEzAcwBmQEzAc4BmgP6
        FQACQgHfAkIB3wJCAd8CQgHfAkIB3wJCAd8CQQHaAwACQgHfAkIB3wJCAd8CQgHfAkIB3wJCAd8CQgHf
        BgAB8gLzA/4bAALjAekD+zYAAfUC9gE3Ac0BnQEzAcwBmQEzAcwBmQEzAcwBmQEzAcwBmQEzAcwBmQEz
        AcwBmQFEAc0BoQP+FQACQwHhAkMB4QJDAeECQwHhAkMB4QJDAeECQwHhAkMB4QJDAeECQwHhAkMB4QJD
        AeECQwHhGAADwwOIA/dCAAHnAe4B6wEzAc4BmwEzAcwBmQEzAcwBmQEzAcwBmQEzAcwBmQEzAcwBmQEz
        AcwBmQEzAcwBmQEzAcwBmQFtAdEBsBgAAkUB4gJFAeICRQHiAkUB4gJFAeICRQHiAkUB4gJFAeICRQHi
        AkUB4gJFAeIGAAHTAeIB3AF0Ac0BuAHsAe4B7QkAA+8DXwNgA38MAAK6AdkBkwGUAdowAAGgAd0ByQEz
        AcwBmQEzAcwBmQEzAcwBmQEzAcwBmQE+Ac0BnwE9Ac0BnwEzAcwBmQEzAcwBmQEzAcwBmQEzAcwBmQGq
        Ad4BzxgAAkYB5AJGAeQCRgHkAkYB5AJGAeQCRgHkAkYB5AJGAeQCRgHkCQAB5QHpAegBtwHcAdAB9QL2
        CQAD9wNfBmAD+QkAAaUBpwHcAXwBfgHWMwABgwHRAbcBMwHMAZkBMwHMAZkBRwHRAaMB/AL9AfQB9gH1
        ATMBzQGaATMBzAGZATMBzAGZATMBzAGZATMBzAGZAeAB6gHnGAACSAHlAkgB5QJIAeUCSAHlAkgB5QJI
        AeUCSAHlIQAD7gOuA2ADhkUAAWwB2gGzAVsB1QGsA/4GAAHXAeUB4AEzAcwBmQEzAcwBmQEzAcwBmQEz
        AcwBmQEzAc0BmgH3AvgSAAJKAecCSgHnAkoB5wJKAecCSgHnAkoB5wJKAecCSgHnAkkB4g8AAdkB4gHe
        A/0PAAP2A4AD3gMAAugB7QP9SwABoQHaAcgBMwHMAZkBMwHMAZkBMwHMAZkBMwHMAZkBPgHRAaAD/gwA
        AksB6QJLAekCSwHpAksB6QJLAekCSwHpAksB6QJLAekCSwHpAksB6QJKAeQJAAGMAdMBwQFCAd4BxQH6
        AfsB+hsAAXUBeAHXAT4BQgHlA/5LAAFmAdQBsgEzAcwBmQEzAcwBmQEzAcwBmQEzAcwBmQFmAdkBsAkA
        Ak0B6gJNAeoCTQHqAk0B6gJNAeoCTQHqAk0B6gJNAeoCTQHqAk0B6gJNAeoCTQHqAkwB5QYABv4GAAP+
        DwAD/gYAAvgB+U4AA/4BPQHRAZ8BMwHMAZkBMwHMAZkBMwHMAZkBMwHMAZkBpQHaAcgDAAJOAewCTgHs
        Ak4B7AJOAewCTgHsAk4B7AJOAewDAAJOAewCTgHsAk4B7AJOAewCTgHsAk4B7AJNAecMAAF+Ab0B6QGb
        AcwB6gMAA/8D+wMAA/sBQQG1Af8B+wL8VwAB+AL5ATMBzQGaATMBzAGZATMBzAGZATMBzAGZATMBzAGZ
        AlcB1gJQAe0CUAHtAlAB7QJQAe0CUAHtAlAB7QkAAlAB7QJQAe0CUAHtAlAB7QJQAe0CUAHtDAABWwG8
        BPoDAAHVAd0B4wFXAbkB+AYAAWoBxAH5AdsB4QHlWgAB4AHqAecBMwHMAZkBMwHMAZkBMwHOAZsB6wHv
        Ae4DAAJRAe8CUQHvAlEB7wJRAe8CUQHvDwACUQHvAlEB7wJRAe8CUQHvAlEB7xUAAeMB5wHqAXkBvAHp
        aQABrgHaAcsBSgHRAaMD+wYAAvEB+AJTAfACUwHwAlMB8BUAAlMB8AJTAfACUwHwmQAD/wJgAfEbAAJU
        AfFmAAFCAU0BPgcAAT4DAAEoAwABQAMAARADAAEBAQABAQUAAYAXAAP/AQAB/QH/AccB8QL/AgAB8AH/
        AYMB4AGfAf0CAAHgAX8BAQHAAY8B+AIAAcABPwKAAc8B+QIAAYABHwHAAQEB/gE/AwABHwHgAQMBHAE8
        AwABDwHwAQcCHAIAAYABBwH4AQ8B/gEfAgABxgEDAfABBwHPAYkCAAH/AQEB4AEDAY8B+AIAAf8BgQHA
        AQEBmwHtAgAB/wOAAfIBRwIAAf8BwAEBAcAB8gFnAgAB/wHgAYMB4AH+AX8CAAH/AfEBhwHxAv8CAAL/
        Ac8B+wL/AgAL
</value>
  </data>
</root>